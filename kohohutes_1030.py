import csv
import sqlite3
import re

# FONTOS JAV√çT√ÅS: A f√°jl√∫tvonal szintaktik√°ja jav√≠tva
DB_NAME = r'C:\Users\zamb\Downloads\kohohutes_1030.db'
HUTOPANELEK_FILE = r'C:\Users\zamb\Documents\egyetem\dtbs\Hutopanelek.csv'
ADAGOK_FILE = r'C:\Users\zamb\Documents\egyetem\dtbs\Adagok.csv'


def initialize_database(conn):
    """L√©trehozza (√©s t√∂rli!) a t√°bl√°kat."""
    cursor = conn.cursor()

    # 1. K√ñTELEZ≈ê: T√∂r√∂lj√ºk a t√°bl√°kat, hogy ne halmoz√≥djon fel az adat
    drop_tables_sql = """
                      DROP TABLE IF EXISTS Homerseklet_Meresek;
                      DROP TABLE IF EXISTS Adag;
                      DROP TABLE IF EXISTS Panel;
                      """
    cursor.executescript(drop_tables_sql)

    # L√©trehoz√≥ SQL-t itt kell futtatni
    create_tables_sql = """
                        CREATE TABLE IF NOT EXISTS Panel 
                        ( 
                            Panel_Szam INTEGER PRIMARY KEY 
                        );
                        CREATE TABLE IF NOT EXISTS Adag 
                        ( 
                            Adag_Szam INTEGER PRIMARY KEY, 
                            Kezdet_Idopont TEXT NOT NULL, 
                            Vege_Idopont TEXT NOT NULL, 
                            Adag_Kozti_Ido TEXT, 
                            Adag_Ido TEXT
                        );
                        CREATE TABLE IF NOT EXISTS Homerseklet_Meresek 
                        ( 
                            Meres_Id INTEGER PRIMARY KEY AUTOINCREMENT, 
                            Meres_Idopont TEXT NOT NULL, 
                            Panel_Szam_FK INTEGER NOT NULL, 
                            Hofok_Ertek REAL, 
                            Adag_Szam_FK INTEGER, 
                            FOREIGN KEY (Panel_Szam_FK) REFERENCES Panel (Panel_Szam),
                            FOREIGN KEY (Adag_Szam_FK) REFERENCES Adag (Adag_Szam)
                        );
                        """
    cursor.executescript(create_tables_sql)
    conn.commit()


def load_adagok(conn):
    """Beolvassa √©s felt√∂lti az Adag t√°bl√°t."""
    print("Adagok felt√∂lt√©se...")
    # JAV√çTVA: cp1250 k√≥dol√°s
    with open(ADAGOK_FILE, 'r', encoding='cp1250') as f:
        # Az Adagok f√°jl oszlopai: ADAGSZUM;Kezdet_D√ÅTUM;Kezdet_ID≈ê;V√©ge_D√ÅTUM;V√©ge_ID≈ê;ADAGK√ñZI ID≈ê;ADAGID≈ê
        reader = csv.reader(f, delimiter=';')
        next(reader) # header kihagy√°sa

        adag_data = []
        for row in reader:
            # Kritikus jav√≠t√°s: Ellen≈ërizz√ºk, hogy az els≈ë oszlop (Adag_Szam) nem √ºres -e!
            if not row or len(row) < 7 or not row[0]: continue
            try:
                # D√°tum/Id≈ë oszlopok √∂sszef≈±z√©se:
                kezdet_dt = f"{row[1]} {row[2]}"  # Kezdet_D√ÅTUM Kezdet_ID≈ê
                vege_dt = f"{row[3]} {row[4]}"  # V√©ge_D√ÅTUM V√©ge_ID≈ê
                #Az int konverzi√≥ most m√°r csak nem √ºres stringre fut le
                adag_data.append((
                    int(row[0]),
                    kezdet_dt,
                    vege_dt,
                    row[5],
                    row[6]
                ))
            except (ValueError, IndexError) as e:
                print(f"Hiba az adag adatok feldolgoz√°s√°ban: {e} - Sor: {row}")

    cursor = conn.cursor()
    cursor.executemany("""
                       INSERT OR IGNORE INTO Adag (Adag_Szam, Kezdet_Idopont, Vege_Idopont, Adag_Kozti_Ido, Adag_Ido)
                       VALUES (?, ?, ?, ?, ?)
                       """, adag_data)
    conn.commit()
    print(f"{len(adag_data)} adag rekord felt√∂ltve.")

def load_hutopanelek(conn):
    """Bet√∂lti a Hutopanelek.csv f√°jl adatait a Homerseklet_Meresek t√°bl√°ba."""
    cursor = conn.cursor()

    # Panel sorsz√°ma √©s a hozz√° tartoz√≥ adat ('ValueY') oszlopindexe a CSV-ben.
    # A Panel 7 HI√ÅNYZIK, az indexek ezt figyelembe veszik.
    panel_oszlopok = {
        1: 1, 2: 3, 3: 5, 4: 7, 5: 9, 6: 11,
        8: 13, 9: 15, 10: 17, 11: 19, 12: 21, 13: 23, 14: 25, 15: 27
    }

    insert_sql = """
                 INSERT INTO Homerseklet_Meresek 
                 (Meres_Idopont, Panel_Szam_FK, Hofok_Ertek) 
                 VALUES (?, ?, ?)
                 """

    try:
        # A HELYES K√ìDOL√ÅS: cp1250
        with open(HUTOPANELEK_FILE, 'r', encoding='cp1250') as f:
            csv_reader = csv.reader(f, delimiter=';')

            # Fejl√©c kihagy√°sa
            next(csv_reader)

            for row in csv_reader:
                # UNPIVOT: Adatok beolvas√°sa oszlopokb√≥l sorokba
                for panel_szam, value_index in panel_oszlopok.items():

                    time_index = value_index - 1
                    meres_idopont = row[time_index]
                    hofok_szoveg = row[value_index]

                    #  1. KRITIKUS JAV√çT√ÅS: Pontok cser√©je k√∂t≈ëjelekre a DATETIME form√°tumhoz
                    meres_idopont_clean = meres_idopont.replace('.', '-')

                    #  2. KRITIKUS JAV√çT√ÅS: Id≈ë standardiz√°l√°sa (pl. " 1:" -> " 01:")
                    # Regul√°ris kifejez√©ssel biztos√≠tjuk, hogy az √≥ra mindig k√©tjegy≈± legyen
                    meres_idopont_final = re.sub(r' (\d):', r' 0\1:', meres_idopont_clean)

                    # Tizedesvessz≈ë cser√©je tizedespontra
                    hofok = hofok_szoveg.replace(',', '.')

                    if meres_idopont_final and hofok:
                        # ITT A JAV√çTOTT ID≈êPONTOT HASZN√ÅLJUK: meres_idopont_final
                        cursor.execute(insert_sql, (meres_idopont_final, panel_szam, hofok))

                conn.commit()

            print("Hutopanelek adatai sikeresen bet√∂ltve a Homerseklet_Meresek t√°bl√°ba.")

    except Exception as e:
        print(f"Hiba t√∂rt√©nt a Hutopanelek bet√∂lt√©se sor√°n: {e}")
        conn.rollback()


def update_adag_fk(conn):
    """
    Friss√≠ti a Homerseklet_Meresek t√°bl√°t az Adag_Szam_FK-val,
    a d√°tumokat pontosan ISO form√°tumra alak√≠tva az √∂sszehasonl√≠t√°s el≈ëtt.
    """
    print("Adag FK friss√≠t√©se id≈ëintervallum alapj√°n (V√©gs≈ë SQL JAV√çT√ÅS)...")
    cursor = conn.cursor()

    # KRITIKUS JAV√çT√ÅS:
    # A DATETIME f√ºggv√©ny helyett a REPLACE-t haszn√°ljuk mindk√©t oldalon.
    # Ez kezeli az "1:00:00" √©s "01:00:00" elt√©r√©seket an√©lk√ºl, hogy a DATETIME eldobn√° a hib√°t.
    # Ugyanakkor az el≈ëz≈ë l√©p√©sben a BET√ñLT√âSKOR kellett volna normaliz√°lni.

    update_sql = """
                 UPDATE Homerseklet_Meresek
                 SET Adag_Szam_FK = (
                     SELECT Adag_Szam
                     FROM Adag
                     WHERE 
                         -- Meres_Idopont tiszt√≠t√°sa: pontok cser√©je k√∂t≈ëjelekre
                         REPLACE(Homerseklet_Meresek.Meres_Idopont, '.', '-') 
                         >= REPLACE(Adag.Kezdet_Idopont, '.', '-')
                     AND 
                         -- Meres_Idopont tiszt√≠t√°sa: pontok cser√©je k√∂t≈ëjelekre
                         REPLACE(Homerseklet_Meresek.Meres_Idopont, '.', '-') 
                         < REPLACE(Adag.Vege_Idopont, '.', '-')
                 )
                 WHERE Adag_Szam_FK IS NULL;
                 """

    # üëÜ FONTOS: Most a DATETIME f√ºggv√©nyt kihagytuk, mivel a REPLACE sorba rendezi a sz√∂veget,
    # de a DATETIME hib√°zik a form√°tum miatt. Ez a leger≈ësebb, leggyorsabb m√≥dszer.

    cursor.execute(update_sql)
    conn.commit()

    # Ellen≈ërizz√ºk, h√°ny sor friss√ºlt sikeresen
    frissitett_sorok_szama = \
        cursor.execute("SELECT COUNT(Meres_Id) FROM Homerseklet_Meresek WHERE Adag_Szam_FK IS NOT NULL").fetchone()[0]
    print(f"{frissitett_sorok_szama} m√©r√©si adathoz tal√°ltunk Adag FK-t √©s friss√≠tett√ºnk.")


# --- F≈ë program futtat√°sa ---
if __name__ == '__main__':
    try:
        # Kapcsol√≥d√°s az adatb√°zishoz (l√©trehozza, ha nem l√©tezik)
        conn = sqlite3.connect(DB_NAME)

        # T√°bl√°k inicializ√°l√°sa
        initialize_database(conn)

        # Adatok felt√∂lt√©se
        load_adagok(conn)
        load_hutopanelek(conn)

        # Kapcsolat l√©trehoz√°sa (Adag_Szam_FK friss√≠t√©se)
        update_adag_fk(conn)

        print("\nAdatb√°zis felt√∂lt√©s befejezve! K√©rem, folytassa a lek√©rdez√©sekkel.")

    except sqlite3.Error as e:
        print(f"SQLite hiba t√∂rt√©nt: {e}")
    except FileNotFoundError:
        print(f"Hiba: A f√°jlok ({HUTOPANELEK_FILE} vagy {ADAGOK_FILE}) nem tal√°lhat√≥k.")
    finally:
        if 'conn' in locals() and conn:
            conn.close()